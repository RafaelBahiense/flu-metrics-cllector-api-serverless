service: flu-metrics-collector-api-serverless

frameworkVersion: "3"

useDotenv: true

package:
  individually: true
  excludeDevDependencies: true
  include:
    - src/**
  exclude:
    - ./**

provider:
  name: aws
  endpointType: REGIONAL
  deploymentMethod: direct
  runtime: python3.11
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  layers:
    - arn:aws:lambda:us-east-1:286391634843:layer:Amadeus-p311-pandas:1
    - arn:aws:lambda:us-east-1:286391634843:layer:Amadeus-p311-psycopg2-binary:1
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
  environment:
    STAGE: ${self:provider.stage}
    AWS_STS_REGIONAL_ENDPOINTS: regional
    DB_HOST: !GetAtt AuroraDBCluster.Endpoint.Address
    DB_SECRET_NAME: my-db-secret
    DB_NAME: ${env:DB_NAME, 'fluapidatabase'}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "secretsmanager:GetSecretValue"
          Resource:
            - !Ref DBSecret

functions: ${file(./functions.yml)}

plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  DBMasterUsername: ${param:DBMasterUsername, 'admin'} # This default will throw a error, it must be changed
  DBMasterUserPassword: ${param:DBMasterUserPassword, ''}
  functionsBasePath: src
  contentEncoding:
    contentCompression: 100
  pythonRequirements:
    dockerizePip: true
    dockerImage: public.ecr.aws/sam/build-python3.11:latest-x86_64
    useStaticCache: false
    useDownloadCache: false
    fileName: requirements-prod.txt
    noDeploy:
      - pip
      - setuptools
      - pandas
      - numpy
      - alembic
      - sqlalchemy
      - mako

resources:
  Parameters:
    DBMasterUsername:
      Type: String
      Description: Master username for the Aurora PostgreSQL database.
      Default: ${self:custom.DBMasterUsername}
    DBMasterUserPassword:
      Type: String
      NoEcho: true
      Description: Master password for the Aurora PostgreSQL database.
      Default: ${self:custom.DBMasterUserPassword}

  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: ${self:service}-vpc

    PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.0.0/24
        AvailabilityZone: ${self:provider.region}a
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-public-subnet

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: ${self:provider.region}a
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: ${self:provider.region}b
        Tags:
          - Key: Name
            Value: ${self:service}-private-subnet-2

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-igw

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    NATGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        SubnetId: !Ref PublicSubnet
        AllocationId: !GetAtt ElasticIP.AllocationId

    ElasticIP:
      Type: AWS::EC2::EIP

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-public-route-table

    PublicDefaultRoute:
      Type: AWS::EC2::Route
      DependsOn: AttachGateway
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet
        RouteTableId: !Ref PublicRouteTable

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-private-route-table

    PrivateDefaultRoute:
      Type: AWS::EC2::Route
      DependsOn: NATGateway
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NATGateway

    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable

    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for Lambda functions"
        VpcId: !Ref VPC
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: ${self:service}-lambda-sg

    DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for Aurora DB cluster"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            SourceSecurityGroupId: !Ref LambdaSecurityGroup
        Tags:
          - Key: Name
            Value: ${self:service}-db-sg

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Subnet group for Aurora DB cluster"
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        DBSubnetGroupName: ${self:service}-db-subnet-group

    AuroraDBCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        Port: 5432
        EngineVersion: "15.4"
        DatabaseName: fluapidatabase
        MasterUsername: !Ref DBMasterUsername
        MasterUserPassword: !Ref DBMasterUserPassword
        VpcSecurityGroupIds:
          - !GetAtt DBSecurityGroup.GroupId
        DBSubnetGroupName: !Ref DBSubnetGroup
        StorageEncrypted: true
        ServerlessV2ScalingConfiguration:
          MinCapacity: 0.5
          MaxCapacity: 1

    AuroraDBInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBClusterIdentifier: !Ref AuroraDBCluster
        DBInstanceClass: db.serverless
        Engine: aurora-postgresql
        PubliclyAccessible: false

    DBSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: my-db-secret
        Description: "Database credentials"
        SecretString: !Sub
          - |
            {
              "username": "${Username}",
              "password": "${Password}"
            }
          - Username: !Ref DBMasterUsername
            Password: !Ref DBMasterUserPassword
        Tags:
          - Key: Name
            Value: ${self:service}-db-secret

    VPCEndpointSTS:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        ServiceName: com.amazonaws.${self:provider.region}.sts
        VpcId: !Ref VPC
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !Ref VPCEndpointSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

    VPCEndpointSecretsManager:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        ServiceName: com.amazonaws.${self:provider.region}.secretsmanager
        VpcId: !Ref VPC
        VpcEndpointType: Interface
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !Ref VPCEndpointSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

    VPCEndpointSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for VPC endpoints
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId

  Outputs:
    AuroraDBClusterEndpoint:
      Description: "Aurora DB Cluster Endpoint"
      Value: !GetAtt AuroraDBCluster.Endpoint.Address
      Export:
        Name: ${self:service}-${self:provider.stage}-db-endpoint

    LambdaSecurityGroup:
      Description: "Security Group ID for Lambda Functions"
      Value: !Ref LambdaSecurityGroup
      Export:
        Name: ${self:service}-${self:provider.stage}-lambda-sg

    PrivateSubnet1:
      Description: "Private Subnet 1 ID"
      Value: !Ref PrivateSubnet1
      Export:
        Name: ${self:service}-${self:provider.stage}-private-subnet-1

    PrivateSubnet2:
      Description: "Private Subnet 2 ID"
      Value: !Ref PrivateSubnet2
      Export:
        Name: ${self:service}-${self:provider.stage}-private-subnet-2

    DBSecretArn:
      Description: "ARN of the DB Secret"
      Value: !Ref DBSecret
      Export:
        Name: ${self:service}-${self:provider.stage}-db-secret-arn